= まとめ1 ~ 思い通りにいかないのがアプリ開発だなんて割り切りたくないから ~

さて、様々な仕様変更を乗り越え、なんとかリリースできそうな状態にまでこぎつけることができました。

ここで、一度仕様変更の種類を整理してみます。

本書で登場した仕様変更は下記の3種類でした。

 * 検証不足
 * ユーザ目線による改善案
 * 好奇心による独断専行

おそらくほかのアプリ開発の場合でも似たような種類の問題によって仕様変更が発生しているのではないかと思います。

これらの仕様変更は未然に防ぐことができたでしょうか？
//blankline
個人的な意見になりますが、@<strong>{防ぐことはできなかった}のではないかと思います。

なぜ防ぐことはできない、という意見になるのか、個別に見ていきましょう。

== 検証不足による仕様変更

基本的に新しいアプリを作るということは、今までになかったものを作るという行為になります。

そのため、@<strong>{事前に問題になりそうな個所を把握する}ことが非常に難しいということはご理解いただけるかと思います。

もちろん経験によって、減らすことはできます。ですが、0には出来ません。

とくに問題になった個所が、外部要因によるものだった場合、事前検証によってそれらを把握するのはコストに見合わないことが多いでしょう。

PM、開発者諸氏におきましては、このことをどうか覚えておいてほしいと思います。

== ユーザ目線による改善案のための仕様変更

基本的に新しいアプリを作るということは、今までになかったものを作るという行為になります。

そのため、最初はどうしても@<strong>{脳内シミュレーション}を元にアプリの設計を行うため、実際に出来上がったものを触ったら@<strong>{なんかイメージと違う}ということが発生してしまうのは理解いただけるかと思います。

もちろん経験によって、減らすことはできます。ですが、0には出来ません。

事前の脳内シミュレーションのみで完璧を目指すというのはコストに見合わないことが多いでしょう。

PM、開発者諸氏におきましては、このことをどうか覚えておいてほしいと思います。

== 好奇心による独断専行

基本的に新しいアプリを作るということは、今までになかったものを作るという行為になりますニャ。

そのため、新しい技術を使いたいですニャ。

こんごのための経験ですニャ。

コストは考えずに突っ走るニャ。

PMはそのことを理解するニャ。

= まとめ2 ~ 手を取り合って ~

では、この、仕様変更によって開発期間が延びてしまう問題を解決するには一体どうすればよいのでしょうか？

簡単です。みんなが仕様変更に寛容になればいいのです。

 * @<strong>{よいアプリを作ろうとおもったら必ず仕様変更が発生する}
 * @<strong>{作ってから考えた方が速いこともおおい}
 * @<strong>{動かしてみることで見えてくることもある}

これらを皆が念頭において、@<strong>{手を取り合いながら開発を進めていく}。

それが結局のところ一番良い方法になるのではないかと思います。

 * 例えば、開発中の動作確認でやりたいことが達成できていなさそうなら早めに相談する
 * 例えば、脳内の動作確認シミュレーションではまだ不安が残っていることを事前に伝えておく

お互いにそういった心遣いをすることで、仕様変更に対する取り組み方が変わり、ひいては良いアプリに繋がっていくのではないかと思います。

だから新しい技術を入れようとする開発者も温かい目で見守るニャ。